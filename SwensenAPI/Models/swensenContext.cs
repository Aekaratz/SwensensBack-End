// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace SwensenAPI.Models
{
    public partial class swensenContext : DbContext
    {
        public swensenContext()
        {
        }

        public swensenContext(DbContextOptions<swensenContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Districts> Districts { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<Provinces> Provinces { get; set; }
        public virtual DbSet<Subdistricts> Subdistricts { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserAddress> UserAddress { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=DESKTOP-44438SK;Initial Catalog=swensen;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("Thai_CI_AI");

            modelBuilder.Entity<Districts>(entity =>
            {
                entity.HasIndex(e => e.ProvinceId, "IX_Districts_ProvinceId");

                entity.HasIndex(e => e.Code, "UX_Districts_Code")
                    .IsUnique();

                entity.Property(e => e.NameInEnglish)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.NameInThai)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.HasOne(d => d.Province)
                    .WithMany(p => p.Districts)
                    .HasForeignKey(d => d.ProvinceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Districts_Provinces");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.HasKey(e => e.Product_ID);

                entity.Property(e => e.ProductCattagory)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Product_Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Provinces>(entity =>
            {
                entity.HasIndex(e => e.Code, "UX_Provinces_Code")
                    .IsUnique();

                entity.Property(e => e.NameInEnglish)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.NameInThai)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<Subdistricts>(entity =>
            {
                entity.HasIndex(e => e.DistrictId, "IX_Subdistricts_DistrictId");

                entity.HasIndex(e => e.Code, "UX_Subdistricts_Code")
                    .IsUnique();

                entity.HasIndex(e => e.ZipCode, "UX_Subdistricts_ZipCode");

                entity.Property(e => e.Latitude).HasColumnType("decimal(6, 3)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(6, 3)");

                entity.Property(e => e.NameInEnglish).HasMaxLength(150);

                entity.Property(e => e.NameInThai)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.HasOne(d => d.District)
                    .WithMany(p => p.Subdistricts)
                    .HasForeignKey(d => d.DistrictId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Subdistricts_Districts");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.Email);

                entity.Property(e => e.Email)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Birthday).HasColumnType("date");

                entity.Property(e => e.Lname)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Sex)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<UserAddress>(entity =>
            {
                entity.HasKey(e => e.Address_ID);

                entity.Property(e => e.AddressName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.District)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Province)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Tambon)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Zipcode)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}